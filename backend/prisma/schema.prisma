generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdProjects LegacyProject[]
  memberships     ProjectMember[]

  @@index([email])
  @@map("users")
}

model LegacyProject {
  id             String   @id @default(uuid())
  subjectName    String
  subjectAge     Int?
  subjectPhoto   String?
  diagnosis      String?
  diagnosisDate  DateTime?
  status         ProjectStatus @default(ACTIVE)
  createdById    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  createdBy      User            @relation(fields: [createdById], references: [id], onDelete: Cascade)
  members        ProjectMember[]
  conversations  Conversation[]
  stories        Story[]
  invitations    Invitation[]

  @@index([createdById])
  @@index([status])
  @@map("legacy_projects")
}

model ProjectMember {
  id           String        @id @default(uuid())
  projectId    String
  userId       String?
  email        String
  name         String
  relationship String
  role         MemberRole    @default(CONTRIBUTOR)
  status       MemberStatus  @default(INVITED)
  invitedAt    DateTime      @default(now())
  joinedAt     DateTime?

  // Relations
  project      LegacyProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user         User?         @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([projectId, email])
  @@index([projectId])
  @@index([userId])
  @@index([email])
  @@map("project_members")
}

model Conversation {
  id                String            @id @default(uuid())
  projectId         String
  scheduledAt       DateTime
  completedAt       DateTime?
  duration          Int               @default(0) // in minutes
  topic             String
  status            ConversationStatus @default(SCHEDULED)
  audioUrl          String?
  transcriptUrl     String?
  storiesExtracted  Int               @default(0)
  emotionalMoments  Int               @default(0)
  clarityScore      Int               @default(0) // 0-100
  specialNotes      String?
  suggestedTopics   String[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  project           LegacyProject     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  stories           Story[]

  @@index([projectId])
  @@index([status])
  @@index([scheduledAt])
  @@map("conversations")
}

model Story {
  id                String       @id @default(uuid())
  projectId         String
  conversationId    String
  title             String
  excerpt           String
  fullContent       String       @db.Text
  duration          String       // e.g., "3 min read"
  tags              String[]
  status            StoryStatus  @default(PENDING)
  emotionalMoments  Int          @default(0)
  audioClipUrl      String?
  relatedPhotos     String[]
  approvedBy        String?
  approvedAt        DateTime?
  conversationDate  DateTime
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  project           LegacyProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  conversation      Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([conversationId])
  @@index([status])
  @@map("stories")
}

model Invitation {
  id              String           @id @default(uuid())
  projectId       String
  email           String
  name            String
  relationship    String
  personalMessage String?          @db.Text
  token           String           @unique
  status          InvitationStatus @default(PENDING)
  sentAt          DateTime         @default(now())
  expiresAt       DateTime
  acceptedAt      DateTime?

  // Relations
  project         LegacyProject    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([email])
  @@index([status])
  @@map("invitations")
}

// Enums
enum ProjectStatus {
  ACTIVE
  PAUSED
  COMPLETED
}

enum MemberRole {
  ADMIN
  CONTRIBUTOR
  VIEWER
}

enum MemberStatus {
  ACTIVE
  INVITED
  PENDING
}

enum ConversationStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  PROCESSING
  CANCELLED
}

enum StoryStatus {
  PENDING
  APPROVED
  REJECTED
  EDITED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
}